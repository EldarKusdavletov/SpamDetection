import sys
import pickle
import tensorflow as tf
from tensorflow.keras.preprocessing.sequence import pad_sequences

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
MAX_LEN = 150
MODEL_PATH = 'spam_classifier_tensorflow.keras'
TOKENIZER_PATH = 'tokenizer_tensorflow.pickle'


# --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ ---
def load_artifacts():
    try:
        model = tf.keras.models.load_model(MODEL_PATH)
        with open(TOKENIZER_PATH, 'rb') as f:
            tokenizer = pickle.load(f)
        return model, tokenizer
    except (IOError, FileNotFoundError):
        print(f"üö® –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã {MODEL_PATH} –∏–ª–∏ {TOKENIZER_PATH}.")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ train_tensorflow.py –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.")
        sys.exit(1)


# --- 2. –õ–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ ---
def analyze_text(text: str, model, tokenizer):
    sequence = tokenizer.texts_to_sequences([text])
    padded_sequence = pad_sequences(sequence, maxlen=MAX_LEN, padding='post', truncating='post')

    risk_score = model.predict(padded_sequence, verbose=0)[0][0]

    if risk_score <= 0.3:
        risk_level = "safe"
        risk_description = "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ"
    elif 0.3 < risk_score <= 0.7:
        risk_level = "suspicious"
        risk_description = "‚ö†Ô∏è –°–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞)"
    else:
        risk_level = "high_risk"
        risk_description = "üö® –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ (–≤–µ—Ä–æ—è—Ç–Ω—ã–π –º–æ—à–µ–Ω–Ω–∏–∫)"

    return {
        "input_text": text,
        "risk_score": float(risk_score),
        "risk_level": risk_level,
        "risk_description": risk_description
    }


# --- –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ ---
if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python analyze_cli_tensorflow.py \"–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\"")
        sys.exit(1)

    message = " ".join(sys.argv[1:])

    model, tokenizer = load_artifacts()
    result = analyze_text(message, model, tokenizer)

    print("\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ ---")
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ:      '{result['input_text']}'")
    print(f"–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞:   {result['risk_score']:.4f} ({result['risk_score'] * 100:.2f}%)")
    print(f"–£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã: {result['risk_description']}")
    print("-------------------------")